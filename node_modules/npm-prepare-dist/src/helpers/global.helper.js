"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeArray = exports.cleanPackageJson = exports.copyFiles = void 0;
const fs_1 = require("fs");
const path_1 = __importStar(require("path"));
const currentPath = path_1.default.resolve('./');
const originalPackage = require(`${currentPath}/package.json`);
/**
 * Copy README into `dist` folder
 * @param {string} distFolder Build folder
 * @param {string[]} files Get all listed files and copy into dist folder. Eg. license, readme...
 */
const copyFiles = (distFolder, files) => {
    // Set header text
    if (files.length) {
        console.log('\x1b[32m', 'Those files copied into `dist` folder:');
    }
    for (const file of files) {
        (0, fs_1.copyFileSync)(`${currentPath}/${file}`, `${currentPath}/${distFolder}/${file}`);
        console.log(` – ./${distFolder}/${file}`);
    }
    // Reset color
    if (files.length) {
        console.log('\x1b[0m');
    }
};
exports.copyFiles = copyFiles;
/**
 * Clean package.json
 * @param {string} distFolder Build folder
 * @param {string} main Main file folder
 * @param {boolean} removeDeps Remove all dependencies
 * @param {string[]} removeScripts Remove some scripts
 */
const cleanPackageJson = (distFolder, main, removeDeps, removeScripts) => {
    // Modify package.json and copy into dist folder
    const pkg = originalPackage;
    // Add js module
    pkg.module = `${main}index.js`;
    // Add main script
    pkg.main = `${main}index.js`;
    // Add main typescript definitions
    pkg.types = `${main}index.d.ts`;
    // Remove unused devDepes
    delete pkg.devDependencies;
    // Remove husky if exist
    delete pkg.husky;
    // Remove all dependencies
    if (removeDeps) {
        delete pkg.dependencies;
        console.log('\x1b[32m', `All dependencies deleted...`, '\x1b[0m');
    }
    // Remove scripts from package.json
    if (removeScripts.length) {
        console.log('\x1b[32m', `Trying to delete scripts from package.json...`, '\x1b[0m');
        for (const script of removeScripts) {
            const value = pkg.scripts[script];
            if (value) {
                delete pkg.scripts[script];
                console.log(`✓ "${script}": "${value}"`, '\x1b[32m', 'Deleted', '\x1b[0m');
            }
            else {
                console.log(`⚠ "${script}"`, '\x1b[32m', 'Not found', '\x1b[0m');
            }
        }
    }
    try {
        (0, fs_1.writeFileSync)((0, path_1.join)(currentPath, `${distFolder}`, 'package.json'), JSON.stringify(pkg, null, 2));
        console.log('\x1b[32m', `File './${distFolder}/package.json' was modified and now is ready for distribution.`, '\x1b[0m');
    }
    catch (e) {
        console.error('Error modifing package.json', e);
    }
};
exports.cleanPackageJson = cleanPackageJson;
const makeArray = (input) => {
    if (Array.isArray(input)) {
        return input;
    }
    else {
        return [input];
    }
};
exports.makeArray = makeArray;
